<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kthcorp.cmts.mapper.TestMapper">

    <select id="getCurrentDateTime" resultType="String">
        /* getCurrentDateTime */
        select NOW()
    </select>

    <select id="getVocList" resultType="map">
        select voc_id, question, answer from voc_list
    </select>

    <update id="uptVocListById" parameterType="map">
        update voc_list set words = #{words}
        where voc_id = #{voc_id}
    </update>

    <select id="getFaqList" resultType="map">
        select faq_id, question, answer from faq_list
    </select>

    <update id="uptFaqListById" parameterType="map">
        update faq_list set words = #{words}
        where faq_id = #{faq_id}
    </update>

    <insert id="insYjItems" parameterType="map">
        /* insYjItems */
        insert into yj_items
        (yj_id, type, purity_title, titleshort, stat, director, director_en
        , year, openday_kr, actors_display, actors_display_en, country_of_origin, yj_grade, regdate, regid)
        values (
        #{yj_id}, 'yj', #{purity_title}, #{titleshort}, 'Y',  #{director}, #{director_en}
        , #{year}, #{openday_kr}, #{actors_display}, #{actors_display_en}, #{country_of_origin}, #{yj_grade}, now(), 'ghkdwo77'
        )
    </insert>

    <insert id="insYcDatas" parameterType="map">
        /* insYcDatas */
        insert into yc_datas2
        (type, filecnt, title, words, regdate, content_id, series_id, kmrb_id, itemidx)
        values
        (#{type}, #{filecnt}, #{title}, #{words}, now(), #{content_id}, #{series_id}, #{kmrb_id}, #{itemidx})
    </insert>

    <select id="getYcDatas1st" resultType="map">
        /* getYcDatas1st */
        select * from (
            select yc.title, yc.titlecnt, yc.kmrb_id, yc.words
            , ( select purity_title from yj_items where yj_id = yc.kmrb_id) as purity_title
            from yc_datas yc
            where length(yc.words) > 2 and yc.titlecnt = 1
        ) c
    </select>

    <select id="getYcDatas2st" resultType="map">
        /* getYcDatas2st
        select * from (
        select yc.title, yc.titlecnt, yc.kmrb_id, yc.words
        , ( select purity_title from yj_items where yj_id = yc.kmrb_id) as purity_title
        , ( select replace(group_concat(content_id), " ", "") from ccube_contents where kmrb_id = yc.kmrb_id ) as content_id
        from yc_datas2 yc
        where length(yc.words) > 2 and titlecnt = 1
        ) c where c.content_id is not null;  */
        select * from (
            select yc.title, yc.titlecnt, yc.kmrb_id, yc.words
            , ( select purity_title from yj_items where yj_id = yc.kmrb_id) as purity_title
            from yc_datas2 yc
            where length(yc.words) > 2 and yc.titlecnt = 1
        ) c
    </select>

    <select id="getNoGenreItems" resultType="com.kthcorp.cmts.model.Items">
        /* getNoGenreItems */
        select a.cid,a.idx,a.title,a.genre from (
        select it.idx, it.title, it.cid
        , ( select meta from items_metas where idx = it.idx and  mtype = 'genre' ) as genre
        from items it
        ) a where a.genre is null

    </select>

    <select id="getItemsForSubgenre_" resultType="map">
    /* getItemsForSubgenre */

    select ifs.*
    , ( select country_of_origin from ccube_contents where content_id = ifs.cid limit 1 ) as origin
    from items_for_subgenre ifs

    </select>

    <select id="getItemsForSubgenre" resultType="map">
        /* getItemsForSubgenre */
        select it.*
        , ( select country_of_origin from ccube_contents where content_id = it.cid limit 1 ) as origin
        , ( select kt_rating from ccube_contents where content_id = it.cid limit 1 ) as kt_rating
        , itm.meta as genre
        from items it
        inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
        inner join items_metas itm on itm.idx = it.idx and itm.mtype = 'genre' and length(itm.meta) > 2
        where it.type like concat ('CcubeContent', '%')
    </select>

    <select id="getItemsForSubgenre2" resultType="map">
        /* getItemsForSubgenre2 */
        select it.*
        , ( select country_of_origin from ccube_series where series_id = it.cid limit 1 ) as origin
        , ( select kt_rating from ccube_series where series_id = it.cid limit 1 ) as kt_rating
        , itm.meta as genre
        from items it
        inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
        inner join items_metas itm on itm.idx = it.idx and itm.mtype = 'genre' and length(itm.meta) > 2
        where it.type like concat ('CcubeSeries', '%')
    </select>

    <select id="getItemsAndSubgenre" resultType="map">
        /* getItemsAndSubgenre */
        select it.idx, it.cid, it.title
        , (select meta from items_metas where idx = it.idx and mtype = 'genre') as genre
        , it.kt_rating
        , (select meta from items_metas where idx = it.idx and mtype = 'subgenreMix') as subgenreMix
        , (select meta from items_metas where idx = it.idx and mtype = 'subgenreOrgin') as subgenreOrgin
        , (select meta from items_metas where idx = it.idx and mtype = 'subgenreword1') as subgenreword1
        , (select meta from items_metas where idx = it.idx and mtype = 'subgenreword2') as subgenreword2
        , (select meta from items_metas where idx = it.idx and mtype = 'subgenretopic1') as subgenretopic1
        , (select meta from items_metas where idx = it.idx and mtype = 'subgenretopic2') as subgenretopic2
        from items_for_subgenre it

    </select>

    <select id="getItemsStatRt" resultType="map">
        /* getItemsStatRt */
        select it.idx, it.cid, it.title
        , ( select count(*) from items_tags_keys where idx = it.idx and stat = 'S' ) as st_cnt
        from items it
        inner join items_stat iss on iss.idx = it.idx and iss.stat = 'RT'
    </select>

    <select id="getItemsForDaumAward" resultType="map">
        /* getItemsForDaumAward  */
        select it.idx, it.title, it.year
        from items it
        limit 10;
    </select>

    <select id="getItemsForSearchKeywords" resultType="map">
        /* getItemsForSearchKeywords  */
        select it.idx, it.title from items_stat iss
        inner join items it on it.idx = iss.idx
        where iss.stat = 'ST' and iss.regdate <![CDATA[ > ]]> '2018-04-11 00:00:00'
        #limit 10
    </select>


    <select id="cntItemsMetasForSubgenre" resultType="map" parameterType="java.lang.String">
        /* cntItemsMetasForSubgenre */
        select count(*) as cnt, mtype, meta from items_metas where mtype like concat ('subgenre','%')
        <if test='value != null and value != ""'>
            and mtype = #{value}
        </if>
        group by mtype, meta
    </select>

    <select id="getRtItems0417" resultType="map">
        /* getRtItems0417 */
        select it.idx, it.type, it.cid, it.title, it.regdate
        , (select count(*) from ccube_contents_orig where content_id = it.cid ) as cntcid
        , (select count(*) from ccube_series_orig where series_id = it.cid ) as cntsid
         from items it
        inner join items_stat iss on it.idx = iss.idx and iss.stat = 'RT'
        where it.tagcnt = 0
    </select>

    <select id="getContentsAssetList" resultType="map">
        /* getContentsAssetList */
        select cid, asset_id
        from ccube_contents_asset
    </select>

    <insert id="insContentsAsset" parameterType="map">
        /* insContentsAsset */
        insert into ccube_contents_asset_uniq (cid, asset_id)
        values
        <foreach collection="list" item="item" separator=" , ">
            (#{item.cid}, #{item.asset_id})
        </foreach>
    </insert>

    <select id="getItemIdxByContentsAssetId" resultType="map">
        /* getItemIdxByContentsAssetId */
        select it.idx
        from items it
        inner join ccube_contents_asset_uniq cca on cca.cid = it.cid and cca.asset_id = #{asset_id}
    </select>

    <select id="getItemIdxBySeriesAssetId" resultType="map">
        /* getItemIdxBySeriesAssetId */
        select it.idx
        from items it
        inner join ccube_series_asset_uniq cca on cca.sid = it.cid and cca.asset_id = #{asset_id}
    </select>

    <select id="getSeriesAssetList" resultType="map">
        /* getSeriesAssetList */
        select sid, asset_id
        from ccube_series_asset
    </select>

    <insert id="insSeriesAsset" parameterType="map">
        /* insSeriesAsset */
        insert into ccube_series_asset_uniq (sid, asset_id)
        values
        <foreach collection="list" item="item" separator=" , ">
            (#{item.sid}, #{item.asset_id})
        </foreach>
    </insert>

    <select id="getCcubeContentsAll" resultType="map">
        /* getCcubeContentsAll */
        select
        it.idx
        , it.type
        , it.cid
        , cc.MASTER_CONTENT_ID mcid
        , cc.content_title
        , cc.eng_title
        , cc.director
        , cc.year
        #, csu.asset_id
        from items it
        inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
        inner join ccube_contents cc on cc.content_id = it.cid
        #inner join ccube_contents_asset_uniq csu on csu.cid = it.cid
        where it.idx not in ( select idx from items_metas where mtype = 'award' )
        order by iss.regdate desc
        #limit 20

    </select>

    <select id="cntAwardIdx" parameterType="map" resultType="java.lang.Integer">
        /* cntAwardIdx */
        select count(*) as cnt from items_metas where idx=#{idx} and mtype = #{mtype}
    </select>

    <select id="getAllAwards" resultType="map">
        /* getAllAwards */

        select
        im.idx
        , ( select title from items where idx = im.idx limit 1 ) as title
        , ( select meta from items_metas where idx = im.idx and mtype = 'movie_title' limit 1 ) as daum_title
        , ( select meta from items_metas where idx = im.idx and mtype = 'movie_url' limit 1 ) as daum_url
        , im.meta as award
        , ( select meta from items_metas where idx = im.idx and mtype = 'award_bak' limit 1 ) as award_bak
        from items_metas im
        where im.mtype = 'award'
        and length(im.meta) > 3
        ;
    </select>

    <select id="getCcubeSeriesAll" resultType="map">
        /* getCcubeSeriesAll */
        select
        it.idx
        , it.type
        , it.cid
        , cc.series_nm as content_title
        , csu.asset_id
        from items it
        inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
        inner join ccube_series cc on cc.series_id = it.cid
        inner join ccube_series_asset_uniq csu on csu.sid = it.cid

    </select>


    <select id="getCcubeContentsFT" resultType="map">
        /* getCcubeContentsFT */
        /*
        select
        it.idx
        , it.type
        , it.cid
        , cc.MASTER_CONTENT_ID mcid
        , cc.content_title
        from items it
        inner join items_stat iss on iss.idx = it.idx and iss.stat = 'FT'
        inner join ccube_contents cc on cc.content_id = it.cid
        */
        select
        0 as idx,
        'CcubeContent' as type,
        content_id as cid,
        master_content_id as mcid,
        content_title
        from ccube_contents
        where regdate <![CDATA[ > ]]> '2018-05-14 19:00:00'
    </select>

    <select id="getCcubeSeriesFT" resultType="map">
        /* getCcubeSeriesFT */
        /*
        select
        it.idx
        , it.type
        , it.cid
        , cc.series_nm as content_title
        from items it
        inner join items_stat iss on iss.idx = it.idx and iss.stat = 'FT'
        inner join ccube_series cc on cc.series_id = it.cid
        */

        select
        0 as idx,
        'CcubeSeries' as type,
        series_id as cid,
        series_nm as content_title
        from ccube_series
        where regdate <![CDATA[ > ]]> '2018-05-14 19:00:00'
    </select>

    <select id="getItemsAndAwardAll" resultType="map">
        /* getItemsAndAwardAll */
        select
        it.idx
        , it.title
        , cc.year
        , itm.meta as award
        from items it
        inner join items_metas itm on itm.idx = it.idx and itm.mtype = 'award' and length(itm.meta) > 4
        inner join ccube_contents cc on cc.content_id = it.cid and cc.year is not null and length(cc.year) > 1
		where it.type like concat('CcubeContent','%')
    </select>

    <select id="getItemsAndAwardAll2" resultType="map">
        /* getItemsAndAwardAll2 */
        select it.idx, it.type, it.cid, it.title, im.meta as award
        from items it
        inner join items_metas im on im.idx = it.idx and im.mtype = 'award' and length(im.meta) > 4

    </select>

    <select id="getDicKeywordsByType0" resultType="map" parameterType="java.lang.String">
        /* getDicKeywordsByType0 */
        select * from dic_keywords
        where type = #{value}
    </select>

    <select id="getItemsTagsMetasByType0" resultType="map" parameterType="java.lang.String">
        /* getDicKeywordsByType0 */
        select * from items_tags_metas
        where mtype = #{value}
    </select>


    <select id="getContentsOrigItemsAll" resultType="map" parameterType="com.kthcorp.cmts.model.Items">
        /* getContentsOrigItemsAll */
        select a.itemidx, a.content_id, a.content_title, a.year, a.director, a.kmrb_id, a.master_content_id, a.regdate
            from (
            select
            co.content_id
            , co.content_title
            , co.year
            , co.director
            , co.kmrb_id
            , co.master_content_id
            , it.idx as itemidx
            , iss.regdate
            from ccube_contents_orig co
            inner join ccube_keys ck on (
             /* ( ck.CONTENT_ID = co.CONTENT_ID and ck.CONTENT_ID != '0' )*/
               (ck.MASTER_CONTENT_ID = co.MASTER_CONTENT_ID and ck.MASTER_CONTENT_ID != '0')
               )

            inner join items it on it.idx = ck.ITEMIDX and it.type like concat ('CcubeContent','%')
            inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'

            /* inner join cids_non2 cn2 on cn2.cid = co.content_id */

            ) a
        order by a.itemidx asc
        limit ${pageSize} offset ${offsetIdx}
    </select>

    <select id="cntContentsOrigItemsAll" resultType="java.lang.Integer">
        /* cntContentsOrigItemsAll */
          select count(*) as cnt from (
            select a.itemidx, a.content_id, a.content_title, a.year, a.director, a.kmrb_id, a.master_content_id
            from (
            select
            co.content_id
            , co.content_title
            , co.year
            , co.director
            , co.kmrb_id
            , co.master_content_id
            , it.idx as itemidx
            from ccube_contents_orig co
            inner join ccube_keys ck on (
             /*  or( ck.CONTENT_ID = co.CONTENT_ID and ck.CONTENT_ID != '0' )*/
                      (ck.MASTER_CONTENT_ID = co.MASTER_CONTENT_ID and ck.MASTER_CONTENT_ID != '0')
              )
            inner join items it on it.idx = ck.ITEMIDX and it.type like concat ('CcubeContent','%')
            inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
            ) a
          ) b

    </select>



    <select id="getContentsOrigItemsDay" resultType="map" parameterType="com.kthcorp.cmts.model.Items">
        /* getContentsOrigItemsDay */
        select a.itemidx, a.content_id, a.content_title, a.year, a.director, a.kmrb_id, a.master_content_id, a.regdate
            from (
            select
            co.content_id
            , co.content_title
            , co.year
            , co.director
            , co.kmrb_id
            , co.master_content_id
            , it.idx as itemidx
            , iss.regdate
            from ccube_contents_orig co
            inner join ccube_keys ck on
            ( ( ck.CONTENT_ID = co.CONTENT_ID and ck.CONTENT_ID != '0' )
            or (ck.MASTER_CONTENT_ID = co.MASTER_CONTENT_ID and ck.MASTER_CONTENT_ID != '0') )
            inner join items it on it.idx = ck.ITEMIDX and it.type like concat ('CcubeContent','%') and it.stat != 'M'
            inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'

            and iss.regdate between concat(date_format(date_sub(now(), INTERVAL 1 DAY), '%Y-%m-%d'), ' 00:00:00')
				and concat(date_format(date_sub(now(), INTERVAL 1 DAY), '%Y-%m-%d'), ' 23:59:59')

            ) a
        order by a.itemidx asc
        limit ${pageSize} offset ${offsetIdx}
    </select>

    <select id="getContentsOrigItemsDayByDate" resultType="map" parameterType="com.kthcorp.cmts.model.Items">
        /* getContentsOrigItemsDay */
        select a.itemidx, a.content_id, a.content_title, a.year, a.director, a.kmrb_id, a.master_content_id, a.regdate
            from (
            select
            co.content_id
            , co.content_title
            , co.year
            , co.director
            , co.kmrb_id
            , co.master_content_id
            , it.idx as itemidx
            , iss.regdate
            from ccube_contents_orig co
            inner join ccube_keys ck on ck.CONTENT_ID = co.CONTENT_ID and ck.CONTENT_ID != '0'
            inner join items it on it.idx = ck.ITEMIDX and it.type like concat ('CcubeContent','%')
            inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
            and iss.regdate between concat(date_format(#{searchSdate}, '%Y-%m-%d'), ' 00:00:00')
				and concat(date_format(#{searchSdate}, '%Y-%m-%d'), ' 23:59:59')

            ) a
        order by a.itemidx asc
        limit ${pageSize} offset ${offsetIdx}
    </select>

    <select id="cntContentsOrigItemsDay" resultType="java.lang.Integer">
        /* cntContentsOrigItemsDay */
          select count(*) as cnt from (
            select a.itemidx, a.content_id, a.content_title, a.year, a.director, a.kmrb_id, a.master_content_id
            from (
            select
            co.content_id
            , co.content_title
            , co.year
            , co.director
            , co.kmrb_id
            , co.master_content_id
            , it.idx as itemidx
            from ccube_contents_orig co
            inner join ccube_keys ck on ( ( ck.CONTENT_ID = co.CONTENT_ID and ck.CONTENT_ID != '0' )
            or (ck.MASTER_CONTENT_ID = co.MASTER_CONTENT_ID and ck.MASTER_CONTENT_ID != '0') )
            inner join items it on it.idx = ck.ITEMIDX and it.type like concat ('CcubeContent','%')
            /*and it.idx = 1140*/
            inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
            and iss.regdate between concat(date_format(date_sub(now(), INTERVAL 1 DAY), '%Y-%m-%d'), ' 00:00:00')
				and concat(date_format(date_sub(now(), INTERVAL 1 DAY), '%Y-%m-%d'), ' 23:59:59')
            ) a
          ) b

    </select>

    <select id="cntContentsOrigItemsDayByDate" parameterType="java.lang.String" resultType="java.lang.Integer">
        /* cntContentsOrigItemsDayByDate */
          select count(*) as cnt from (
            select a.itemidx, a.content_id, a.content_title, a.year, a.director, a.kmrb_id, a.master_content_id
            from (
            select
            co.content_id
            , co.content_title
            , co.year
            , co.director
            , co.kmrb_id
            , co.master_content_id
            , it.idx as itemidx
            from ccube_contents_orig co
            inner join ccube_keys ck on ck.CONTENT_ID = co.CONTENT_ID and ck.CONTENT_ID != '0'
            inner join items it on it.idx = ck.ITEMIDX and it.type like concat ('CcubeContent','%')
            inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
            and iss.regdate between concat(date_format(#{date1}, '%Y-%m-%d'), ' 00:00:00')
				and concat(date_format(#{date1}, '%Y-%m-%d'), ' 23:59:59')
            ) a
          ) b

    </select>



    <select id="getSeriesOrigItemsAll" resultType="map" parameterType="com.kthcorp.cmts.model.Items">
        /* getSeriesOrigItemsAll */
        select a.itemidx, a.series_id, a.series_nm, a.year, a.director
            from (
            select
            co.series_id
            , co.series_nm
            , co.year
            , co.director
            , it.idx as itemidx
            from ccube_series co
            inner join ccube_keys ck on ck.SERIES_ID = co.SERIES_ID and ck.SERIES_ID != '0'
            inner join items it on it.idx = ck.ITEMIDX and it.type like concat ('CcubeSeries','%')
            inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
            ) a
        order by a.itemidx asc
        limit ${pageSize} offset ${offsetIdx}
    </select>

    <select id="cntSeriesOrigItemsAll" resultType="java.lang.Integer">
        /* cntSeriesOrigItemsAll */
          select count(*) as cnt from (
            select a.itemidx, a.series_id, a.series_nm, a.year, a.director
            from (
            select
            co.series_id
            , co.series_nm
            , co.year
            , co.director
            , it.idx as itemidx
            from ccube_series co
            inner join ccube_keys ck on ck.SERIES_ID = co.SERIES_ID and ck.SERIES_ID != '0'
            inner join items it on it.idx = ck.ITEMIDX and it.type like concat ('CcubeSeries','%')
            inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
            ) a
          ) b

    </select>



    <select id="getSeriesOrigItemsDay" resultType="map" parameterType="com.kthcorp.cmts.model.Items">
        /* getSeriesOrigItemsDay */
        select a.itemidx, a.series_id, a.series_nm, a.year, a.director
            from (
            select
            co.series_id
            , co.series_nm
            , co.year
            , co.director
            , it.idx as itemidx
            from ccube_series co
            inner join ccube_keys ck on ck.SERIES_ID = co.SERIES_ID and ck.SERIES_ID != '0'
            inner join items it on it.idx = ck.ITEMIDX and it.type like concat ('CcubeSeries','%')
            inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
            and iss.regdate between concat(date_format(date_sub(now(), INTERVAL 1 DAY), '%Y-%m-%d'), ' 00:00:00')
				and concat(date_format(date_sub(now(), INTERVAL 1 DAY), '%Y-%m-%d'), ' 23:59:59')
            ) a
        order by a.itemidx asc
        limit ${pageSize} offset ${offsetIdx}
    </select>

    <select id="getSeriesOrigItemsDayByDate" resultType="map" parameterType="com.kthcorp.cmts.model.Items">
        /* getSeriesOrigItemsDay */
        select a.itemidx, a.series_id, a.series_nm, a.year, a.director
            from (
            select
            co.series_id
            , co.series_nm
            , co.year
            , co.director
            , it.idx as itemidx
            from ccube_series co
            inner join ccube_keys ck on ck.SERIES_ID = co.SERIES_ID and ck.SERIES_ID != '0'
            inner join items it on it.idx = ck.ITEMIDX and it.type like concat ('CcubeSeries','%')
            inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
            and iss.regdate between concat(date_format(#{searchSdate}, '%Y-%m-%d'), ' 00:00:00')
				and concat(date_format(#{searchSdate}, '%Y-%m-%d'), ' 23:59:59')
            ) a
        order by a.itemidx asc
        limit ${pageSize} offset ${offsetIdx}
    </select>


    <select id="cntSeriesOrigItemsDay" resultType="java.lang.Integer">
        /* cntSeriesOrigItemsDay */
          select count(*) as cnt from (
            select a.itemidx, a.series_id, a.series_nm, a.year, a.director
            from (
            select
            co.series_id
            , co.series_nm
            , co.year
            , co.director
            , it.idx as itemidx
            from ccube_series co
            inner join ccube_keys ck on ck.SERIES_ID = co.SERIES_ID and ck.SERIES_ID != '0'
            inner join items it on it.idx = ck.ITEMIDX and it.type like concat ('CcubeSeries','%')
            inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
            and iss.regdate between concat(date_format(date_sub(now(), INTERVAL 1 DAY), '%Y-%m-%d'), ' 00:00:00')
				and concat(date_format(date_sub(now(), INTERVAL 1 DAY), '%Y-%m-%d'), ' 23:59:59')


            ) a
          ) b

    </select>

    <select id="cntSeriesOrigItemsDayByDate" resultType="java.lang.Integer">
        /* cntSeriesOrigItemsDay */
          select count(*) as cnt from (
            select a.itemidx, a.series_id, a.series_nm, a.year, a.director
            from (
            select
            co.series_id
            , co.series_nm
            , co.year
            , co.director
            , it.idx as itemidx
            from ccube_series co
            inner join ccube_keys ck on ck.SERIES_ID = co.SERIES_ID and ck.SERIES_ID != '0'
            inner join items it on it.idx = ck.ITEMIDX and it.type like concat ('CcubeSeries','%')
            inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
            and iss.regdate between concat(date_format(#{date1}, '%Y-%m-%d'), ' 00:00:00')
				and concat(date_format(#{date1}, '%Y-%m-%d'), ' 23:59:59')
            ) a
          ) b

    </select>



    <select id="getContentsOrigItemsAll_100" resultType="map">
        /* getContentsOrigItemsAll_100 */
        select a.cid, a.idx, a.type, a.itemidx, a.content_id, a.content_title, a.year, a.director, a.kmrb_id, a.master_content_id, a.regdate
        , a.mcid, a.eng_title
            from (
            select
            co.content_id
            , co.content_title
            , co.year
            , co.director
            , co.kmrb_id
            , co.master_content_id
            , co.eng_title
            , co.master_content_id as mcid
            , it.idx as itemidx
            , it.idx
            , it.type
            , it.cid
            , iss.regdate
            from ccube_contents co
            inner join ccube_keys ck on ck.CONTENT_ID = co.CONTENT_ID and ck.CONTENT_ID != '0'
            inner join items it on it.idx = ck.ITEMIDX and it.type like concat ('CcubeContent','%')
            inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'

            ) a
        order by a.itemidx asc
        limit 100;
    </select>

    <select id="getSeriesOrigItemsAll_100" resultType="map">
        /* getSeriesOrigItemsAll */
        select a.cid, a.idx, a.type, a.itemidx, a.series_id, a.series_nm, a.year, a.director
        , a.series_nm as content_title
            from (
            select
            co.series_id
            , co.series_nm
            , co.year
            , co.director
            , it.idx as itemidx
            , it.idx
            , it.type
            , it.cid
            from ccube_series co
            inner join ccube_keys ck on ck.SERIES_ID = co.SERIES_ID and ck.SERIES_ID != '0'
            inner join items it on it.idx = ck.ITEMIDX and it.type like concat ('CcubeSeries','%')
            inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
            ) a
        order by a.itemidx asc
        limit 100
    </select>


    <insert id="insDicResultTagKeywords" parameterType="map">
        /* insDicResultTagKeywords */
        insert into dic_result_tag_keywords (mtype, word, wordto, wordadd, worddel, regdate, regid)
        values (#{mtype}, #{word}, #{wordto}, #{wordadd}, #{worddel}, now(), 'ghkdwo77')
    </insert>

    <select id="getMetaKeywordsByMtype" parameterType="map" resultType="map">
        /* getMetaKeywordsByMtype */
        select itm.* from items_tags_metas itm
        inner join items_stat iss on iss.idx = itm.idx and iss.stat = 'ST'
        where itm.mtype = #{mtype}
        and length(itm.meta) > 2
        /* order by regdate asc */
        /* limit 10 */
    </select>

    <select id="getMetasByMtype" parameterType="map" resultType="map">
        /* getMetasByMtype */
        select im.* from items_metas im
        inner join items_stat iss on iss.idx = im.idx and iss.stat = 'ST'
        where im.mtype = #{mtype}
        and length(im.meta) > 2
        /* order by regdate asc */
        /* limit 10 */
    </select>

    <select id="getAllContentsByMcid" resultType="map">
        /* getAllContentsByMcid */
        select cc.master_content_id, cc.content_id, it.title, it.idx as itemidx
        from ccube_contents cc
        inner join ccube_keys ck on ck.content_id = cc.content_id and length(ck.content_id) > 2
        inner join items it on it.idx = ck.itemidx
    </select>


    <select id="getMetaKeywordsByMtypeByLastTagidx" parameterType="map" resultType="map">
        /* getMetaKeywordsByMtypeByLastTagidx */

        select a.*
        , itm.meta
        from (
        select it.idx
        , (select max(tagidx) from items_tags_keys where idx = it.idx and stat = 'S') as tagidx
        from items it
        inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
        ) a
        inner join items_tags_metas itm on itm.idx = a.idx and itm.tagidx = a.tagidx and itm.mtype = #{mtype}
    </select>

    <select id="getSearchKeywordAndCount" parameterType="map" resultType="map">
        /* getSearchKeywordAndCount */
        select sk.mtype, sk.keyword
        , ck.cnt
        from tmp_search_keyword sk
        inner join tmp_count_keyword ck on ck.mtype = sk.mtype and ck.keyword = sk.keyword
        <if test='mtype != null and mtype != ""'>
            where sk.mtype = #{mtype}
        </if>
    </select>

    <insert id="insNonMappedItems" parameterType="map">
        /* insNonMappedItems */
        insert into tmp_non_items (mcid, cid, title, is_tagged) values (#{mcid}, #{cid}, #{title}, #{is_tagged})
    </insert>

    <select id="getNonMappedItems" resultType="map">
        /* getNonMappedItems */
        select mcid, cid, title, is_tagged, is_exist_orig_mcid, is_exist_orig_cid, is_exist_mcid, is_exist_cid
        , exist_title, itemidx_by_cid, is_fail_tagging, tagged_itemidx_by_mcid, tagged_cid_by_mcid
        , tagged_title1, kt_rating from tmp_non_items

    </select>

    <insert id="insTestCidsForAsset" parameterType="map">
        /* getNonMappedItems */
        insert into test_asset_cids (cid, title, asset_id, quality)
        values (#{cid}, #{title}, #{asset_id}, #{quality})
    </insert>

    <select id="getTestCidsForAsset" parameterType="map" resultType="map">
        /* getTestCidsForAsset */
        select * from test_asset_cids

    </select>

    <select id="getItemidxTaggedByCid" parameterType="map" resultType="map">
        /* getItemidxTaggedByCid */
        select iss.idx as itemidx from items_stat iss
        inner join ccube_keys ck on ck.itemidx = iss.idx and ck.content_id = #{cid}
        where iss.stat = 'ST'
        limit 1
    </select>

    <select id="getCountConfirmedItemsByMetas" parameterType="map" resultType="java.lang.Integer">
        /* getCountConfirmedItemsByMetas */
        select count(*) as cnt
            from (
            select itm.idx
            from items_tags_metas itm
            inner join items_stat iss on iss.idx = itm.idx
            where itm.mtype = #{mtype} and itm.meta like concat('%\"',#{meta},'\"%')
            group by itm.idx
        ) a

    </select>

    <insert id="insCidsNon" parameterType="map">
        /* insCidsNon */
        insert into CIDS_NON (cid) values (#{cid})
    </insert>
    
    <!-- 권재일 작업 2019.08.23 : 유형별 메타태그 총량통계 -->
    <select id="getTagsCountByType" parameterType="map" resultType="map">
		select a.mtype,round(sum(a.words)) as wordscnt
		from
		(
			select b.mtype,(length(b.meta)-length(replace(b.meta,'"word":','')))/7 as words -- ,meta
			from items_tags_metas b
			where mtype like 'METAS%'
		) a
		group by a.mtype 
    </select>

    <select id="getRemoveManualDest" resultType="java.util.HashMap">
        /*  getRemoveManualDest */
        select it.title, b.idx, itm.tagidx, itm.meta, itm.mtype from
        (
            select distinct(a.idx) idx from (
                select it.idx from items it
                                       inner join ccube_contents cc on cc.content_id = it.cid and trim(cc.country_of_origin) = 'USA'
                                       inner join items_tags_metas itm on itm.idx =it.idx and itm.meta like '%미국%'
                union all
                select it.idx from items it
                                       inner join ccube_series cc on cc.series_id = it.cid and trim(cc.country_of_origin) = 'USA'
                                       inner join items_tags_metas itm on itm.idx = it.idx and itm.meta like '%미국%'
            ) a
        ) b
        inner join items_tags_metas itm on itm.idx = b.idx and itm.meta like '%미국%'
        inner join items it on it.idx = b.idx
        order by b.idx asc

    </select>
    
</mapper>
